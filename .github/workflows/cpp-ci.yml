name: C++ Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['6.7.1']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # ÉTAPE 1 : Installer les dépendances spécifiques à l'OS
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build libgl1-mesa-dev libxcb-xinerama0 libxkbcommon-x11-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0

    # --- CORRECTION PRINCIPALE CI-DESSOUS ---
    
    # ÉTAPE 2 : Mettre en cache les fichiers Qt
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        # On définit un chemin explicite et statique pour le cache.
        # Ce même chemin sera utilisé pour l'installation.
        path: ${{ runner.temp }}/qt-cache
        key: ${{ runner.os }}-qt-${{ matrix.qt-version }}
        restore-keys: |
          ${{ runner.os }}-qt-

    # ÉTAPE 3 : Installer Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      # On ne lance l'installation que si le cache n'a pas été restauré
      if: steps.cache-qt.outputs.cache-hit != 'true'
      with:
        version: ${{ matrix.qt-version }}
        arch: ${{ runner.os == 'Windows' && 'win64_mingw' || '' }}
        # On dit à l'action d'installer Qt dans le même répertoire que celui utilisé pour le cache.
        dir: ${{ runner.temp }}/qt-cache
        
    # Le reste du workflow est identique et fonctionnera, car `install-qt-action`
    # définira correctement la variable `QT_ROOT_DIR` même avec un répertoire personnalisé.

    # ÉTAPE 4 : Configurer CMake (pour Linux et macOS)
    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_PREFIX_PATH=${{ env.QT_ROOT_DIR }} \
          -D BUILD_TESTING=ON \
          -G Ninja

    # ÉTAPE 4 : Configurer CMake (pour Windows avec le shell msys2)
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        cmake -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_PREFIX_PATH=${{ env.QT_ROOT_DIR }} \
          -D BUILD_TESTING=ON \
          -G Ninja

    # ÉTAPE 5 : Compiler le projet (pour Linux et macOS)
    - name: Build project (Linux/macOS)
      if: runner.os != 'Windows'
      run: cmake --build build --parallel

    # ÉTAPE 5 : Compiler le projet (pour Windows avec le shell msys2)
    - name: Build project (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: cmake --build build --parallel

    # ÉTAPE 6 : Lancer les tests (pour Linux et macOS)
    - name: Run tests (Linux/macOS)
      if: runner.os != 'Windows'
      run: ctest --test-dir build --output-on-failure
      
    # ÉTAPE 6 : Lancer les tests (pour Windows avec le shell msys2)
    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: ctest --test-dir build --output-on-failure