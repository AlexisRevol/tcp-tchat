name: C++ Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['6.7.1']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build libgl1-mesa-dev libxcb-xinerama0 libxkbcommon-x11-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/qt-cache
        key: ${{ runner.os }}-qt-${{ matrix.qt-version }}

    - name: Install Qt Environment
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt-version }}
        arch: ${{ runner.os == 'Windows' && 'win64_mingw' || '' }}
        dir: ${{ runner.temp }}/qt-cache

    # --- ÉTAPE DE DÉBOGAGE (pour voir l'environnement si ça échoue) ---
    - name: Display Environment (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "--- PATH ---"
        # Affiche le PATH, une ligne par entrée pour la lisibilité
        echo $PATH | tr ';' '\n'
        echo "--- QT_ROOT_DIR ---"
        echo $QT_ROOT_DIR
        echo "--- VÉRIFICATION DES OUTILS ---"
        which gcc || echo "gcc not found"
        which g++ || echo "g++ not found"
        which ninja || echo "ninja not found"
        which cmake || echo "cmake not found"

    # ÉTAPES DE BUILD POUR LINUX ET MACOS (inchangé)
    - name: Configure, Build and Test (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -e
        cmake -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_PREFIX_PATH=${{ env.QT_ROOT_DIR }} \
          -D BUILD_TESTING=ON \
          -G Ninja
        
        cmake --build build --parallel
        
        ctest --test-dir build --output-on-failure

    # --- CORRECTION FINALE POUR WINDOWS ---
    - name: Configure, Build and Test (Windows)
      if: runner.os == 'Windows'
      # On utilise bash, qui est standard, au lieu de msys2 qui cause problème.
      shell: bash
      run: |
        set -e
        # Les commandes sont identiques, elles fonctionneront dans bash
        # car install-qt-action a ajouté les outils au PATH.
        cmake -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_PREFIX_PATH="${{ env.QT_ROOT_DIR }}" \
          -D BUILD_TESTING=ON \
          -G Ninja
        
        cmake --build build --parallel
        
        ctest --test-dir build --output-on-failure