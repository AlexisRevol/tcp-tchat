name: C++ Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['6.7.1']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # ÉTAPE 1 : Installer les dépendances spécifiques à l'OS
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build libgl1-mesa-dev libxcb-xinerama0 libxkbcommon-x11-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0

    # ÉTAPE 2 : Mettre en cache les fichiers Qt pour accélérer les builds futurs
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/qt-installer
        key: ${{ runner.os }}-qt-${{ matrix.qt-version }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-qt-${{ matrix.qt-version }}-

    # ÉTAPE 3 : Installer Qt (seulement si le cache n'a pas été trouvé)
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      if: steps.cache-qt.outputs.cache-hit != 'true'
      with:
        version: ${{ matrix.qt-version }}
        # --- LA CORRECTION EST ICI ---
        modules: 'qtbase'

    # ÉTAPE 4 : Configurer CMake
    - name: Configure CMake
      run: >
        cmake -B build
        -D CMAKE_BUILD_TYPE=Release
        -D CMAKE_PREFIX_PATH=${{ env.QT_ROOT_DIR }}
        -D BUILD_TESTING=ON
        -G Ninja

    # ÉTAPE 5 : Compiler le projet
    - name: Build project
      run: cmake --build build --parallel

    # ÉTAPE 6 : Lancer les tests
    - name: Run tests
      run: ctest --test-dir build --output-on-failure